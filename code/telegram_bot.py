import telebot
import time
import threading
import requests

from concurrent.futures import ThreadPoolExecutor
from telebot import types
from datetime import datetime, timedelta
from bs4 import BeautifulSoup as BS


from code.db import Database
from code.menu_handler import *
from code.config import get_telegram_token
from code.schedule import init_list_groups, init_schedule, get_schedule_ptk

STATE_MAIN_MENU = 'main_menu'
STATE_SELECTING_LOCATION = 'selecting_location'
STATE_SELECTING_SCHEDULE = 'selecting_schedule'
STATE_SELECTING_COURSE = 'selecting_course'
STATE_SELECTING_GROUP = 'selecting_group'
STATE_SELECTING_WEEK_TYPE = 'selecting_week_type'
STATE_SELECTING_DAY = 'selecting_day'
STATE_SETTINGS_SELECTING_COLLEGE = 'settings_selecting_college'
STATE_SETTINGS_SELECTING_COURSE = 'settings_selecting_course'
STATE_SETTINGS_SELECTING_GROUP = 'settings_selecting_group'
STATE_SETTINGS_SELECTING_TIME = 'settings_selecting_time'

bot = telebot.TeleBot(get_telegram_token())
update_lock = threading.Lock()

days = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±']

user_context = {}
groups = []

@bot.message_handler(commands=['start'])
def main_menu(message):
    markup_replay = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_geolacation = types.KeyboardButton('–£–∑–Ω–∞—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é')
    item_schedule = types.KeyboardButton('–£–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
    markup_replay.add(item_schedule, item_geolacation)
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?',
                     reply_markup=markup_replay)

@bot.message_handler(content_types=['text'])
def handle_all_messages(message):
    if update_lock.locked():
        bot.send_message(message.chat.id, "–°–µ–π—á–∞—Å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, –ø—Ä–æ—à—É –ø–æ–¥–æ–∂–¥–∞—Ç—å –ø–∞—Ä—É –º–∏–Ω—É—Ç (^._.^)~")
    else:
        global groups, group_student, week_type, college
        
        if message.chat.id not in user_context:
            user_context[message.chat.id] = {'state': STATE_MAIN_MENU}

        user_data = user_context[message.chat.id]
        current_state = user_data.get('state', STATE_MAIN_MENU)
        
        switch = {
            STATE_MAIN_MENU: {
                '–£–∑–Ω–∞—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é': lambda msg: handle_transition_no_context(bot, user_context, msg, STATE_SELECTING_LOCATION, handle_geolocation),
                '–£–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ': lambda msg: handle_transition_no_context(bot, user_context, msg, STATE_SELECTING_SCHEDULE, handle_schedule_request),
                '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è': lambda msg: handle_transition_no_context(bot, user_context, msg, STATE_SETTINGS_SELECTING_COLLEGE, handle_select_college),
                '–°–±—Ä–æ—Å –æ–ø–æ–≤–µ—â–µ–Ω–∏–π': lambda msg: handle_reset_settings(bot, msg),
                '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é': lambda msg: handle_main_menu(bot, msg),

            },
            STATE_SELECTING_LOCATION: {
                '–ì–ª–∞–≤–Ω—ã–π –∫–æ—Ä–ø—É—Å': lambda msg: handle_location(bot, msg, 58.542306, 31.261174, 'üìç–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ì–ª–∞–≤–Ω–æ–≥–æ –∫–æ—Ä–ø—É—Å–∞: –ë–æ–ª—å—à–∞—è –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥—Å–∫–∞—è, 41'),
                '–ü–æ–ª–∏—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–ª–ª–µ–¥–∂': lambda msg: handle_location(bot, msg, 58.541668, 31.264534, 'üìç–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ü–¢–ö: –ë–æ–ª—å—à–∞—è –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥—Å–∫–∞—è, 46'),
                '–ê–Ω—Ç–æ–Ω–æ–≤–æ': lambda msg: handle_location(bot, msg, 58.541079, 31.288108, 'üìç–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ò–ì–£–ú: —Ä–∞–π–æ–Ω –ê–Ω—Ç–æ–Ω–æ–≤–æ, 1'),
                '–ò–¶–≠–£–°': lambda msg: handle_location(bot, msg, 58.522347, 31.258228, 'üìç–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ò–¶–≠–£–°: –ü—Å–∫–æ–≤—Å–∫–∞—è —É–ª–∏—Ü–∞, 3'),
                '–ò–ú–û': lambda msg: handle_location(bot, msg, 58.542809, 31.310567, 'üìç–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ò–ú–û: —É–ª–∏—Ü–∞ –î–µ—Ä–∂–∞–≤–∏–Ω–∞, 6'),
                '–ò–ë–•–ò': lambda msg: handle_location(bot, msg, 58.551745, 31.300628, 'üìç–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ò–ë–•–ò: —É–ª–∏—Ü–∞ –°–æ–≤–µ—Ç—Å–∫–æ–π –ê—Ä–º–∏–∏, 7'),
                '–ü–ò': lambda msg: handle_location(bot, msg, 58.523945, 31.262243, 'üìç–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ü–ò: —É–ª–∏—Ü–∞ –ß–µ—Ä–Ω—è—Ö–æ–≤—Å–∫–æ–≥–æ, 64/6'),
                '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é': lambda msg: handle_transition_no_context(bot, user_context, msg, STATE_MAIN_MENU, handle_main_menu),
            },
            STATE_SELECTING_SCHEDULE: {
                '–ò–≠–ò–°': lambda msg: handle_transition_with_context(bot, user_context, msg, STATE_SELECTING_COURSE, handle_college_selection, 'ieis'),
                '–ò–¶–≠–£–°': lambda msg: handle_transition_with_context(bot, user_context, msg, STATE_SELECTING_COURSE, handle_college_selection, 'itseus'),
                '–ü–ò': lambda msg: handle_transition_with_context(bot, user_context, msg, STATE_SELECTING_COURSE, handle_college_selection, 'pi'),
                '–ò–ë–•–ò': lambda msg: handle_transition_with_context(bot, user_context, msg, STATE_SELECTING_COURSE, handle_college_selection, 'ibhi'),
                '–ò–ì–£–ú': lambda msg: handle_transition_with_context(bot, user_context, msg, STATE_SELECTING_COURSE, handle_college_selection, 'igum'),
                '–ò–ú–û': lambda msg: handle_transition_with_context(bot, user_context, msg, STATE_SELECTING_COURSE, handle_college_selection, 'imo'),
                '–ò–Æ–†': lambda msg: handle_transition_with_context(bot, user_context, msg, STATE_SELECTING_COURSE, handle_college_selection, 'iur'),
                '–ò–ü–¢': lambda msg: handle_transition_with_context(bot, user_context, msg, STATE_SELECTING_COURSE, handle_college_selection, 'ipt'),
                '–ü–¢–ò': lambda msg: handle_transition_with_context(bot, user_context, msg, STATE_SELECTING_COURSE, handle_college_selection, 'pti'),
                '–ù–∞–∑–∞–¥': lambda msg: handle_transition_no_context(bot, user_context, msg, STATE_MAIN_MENU, handle_main_menu),
                '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é': lambda msg: handle_transition_no_context(bot, user_context, msg, STATE_MAIN_MENU, handle_main_menu),
            },
            STATE_SELECTING_COURSE: {
                '1 –∫—É—Ä—Å': lambda msg: handle_show_groups(bot, user_context, user_data, msg, STATE_SELECTING_GROUP),
                '2 –∫—É—Ä—Å': lambda msg: handle_show_groups(bot, user_context, user_data, msg, STATE_SELECTING_GROUP),
                '3 –∫—É—Ä—Å': lambda msg: handle_show_groups(bot, user_context, user_data, msg, STATE_SELECTING_GROUP),
                '4 –∫—É—Ä—Å': lambda msg: handle_show_groups(bot, user_context, user_data, msg, STATE_SELECTING_GROUP),
                '5 –∫—É—Ä—Å': lambda msg: handle_show_groups(bot, user_context, user_data, msg, STATE_SELECTING_GROUP),
                '6 –∫—É—Ä—Å': lambda msg: handle_show_groups(bot, user_context, user_data, msg, STATE_SELECTING_GROUP),
                '–ù–∞–∑–∞–¥': lambda msg: handle_transition_no_context(bot, user_context, msg, STATE_SELECTING_SCHEDULE, handle_schedule_request),
                '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é': lambda msg: handle_transition_no_context(bot, user_context, msg, STATE_MAIN_MENU, handle_main_menu),
            },
            STATE_SELECTING_GROUP: {
                **{grp: lambda msg, group=grp: handle_transition_with_context(bot, user_context, msg, STATE_SELECTING_WEEK_TYPE, handle_group_selection, group) for grp in groups},
                '–ù–∞–∑–∞–¥': lambda msg: handle_transition_with_context(bot, user_context, msg, STATE_SELECTING_COURSE, handle_college_selection, user_data.get('college')),
                '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é': lambda msg: handle_transition_no_context(bot, user_context, msg, STATE_MAIN_MENU, handle_main_menu),
            },
            STATE_SELECTING_WEEK_TYPE: {
                '–í–µ—Ä—Ö–Ω—è—è': lambda msg: handle_transition_with_context(bot, user_context, msg, STATE_SELECTING_DAY, handle_week_selection, '–í–µ—Ä—Ö–Ω—è—è'),
                '–ù–∏–∂–Ω—è—è': lambda  msg: handle_transition_with_context(bot, user_context, msg, STATE_SELECTING_DAY, handle_week_selection, '–ù–∏–∂–Ω—è—è'),
                '–ù–∞–∑–∞–¥': lambda msg: handle_show_groups(bot, user_context, user_data, msg, STATE_SELECTING_GROUP),  
                '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é': lambda msg: handle_transition_no_context(bot, user_context, msg, STATE_MAIN_MENU, handle_main_menu),
            },
            STATE_SELECTING_DAY: {
                **{day: lambda msg, d=day: handle_display_schedule(bot, msg, user_data.get('group'), user_data.get('week_type'), d, get_schedule_ptk) for day in ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±']}, 
                '–ù–∞–∑–∞–¥': lambda msg: handle_transition_with_context(bot, user_context, msg, STATE_SELECTING_WEEK_TYPE, handle_group_selection, user_data.get('group')),
                '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é': lambda msg: handle_transition_no_context(bot, user_context, msg, STATE_MAIN_MENU, handle_main_menu),
            },
            STATE_SETTINGS_SELECTING_COLLEGE: {
                '–ò–≠–ò–°': lambda msg: handle_transition_with_context(bot, user_context, msg, STATE_SETTINGS_SELECTING_COURSE, handle_select_course, 'ieis'),
                '–ò–¶–≠–£–°': lambda msg: handle_transition_with_context(bot, user_context, msg, STATE_SETTINGS_SELECTING_COURSE, handle_select_course, 'itseus'),
                '–ü–ò': lambda msg: handle_transition_with_context(bot, user_context, msg, STATE_SETTINGS_SELECTING_COURSE, handle_select_course, 'pi'),
                '–ò–ë–•–ò': lambda msg: handle_transition_with_context(bot, user_context, msg, STATE_SETTINGS_SELECTING_COURSE, handle_select_course, 'ibhi'),
                '–ò–ì–£–ú': lambda msg: handle_transition_with_context(bot, user_context, msg, STATE_SETTINGS_SELECTING_COURSE, handle_select_course, 'igum'),
                '–ò–ú–û': lambda msg: handle_transition_with_context(bot, user_context, msg, STATE_SETTINGS_SELECTING_COURSE, handle_select_course, 'imo'),
                '–ò–Æ–†': lambda msg: handle_transition_with_context(bot, user_context, msg, STATE_SETTINGS_SELECTING_COURSE, handle_select_course, 'iur'),
                '–ò–ü–¢': lambda msg: handle_transition_with_context(bot, user_context, msg, STATE_SETTINGS_SELECTING_COURSE, handle_select_course, 'ipt'),
                '–ü–¢–ò': lambda msg: handle_transition_with_context(bot, user_context, msg, STATE_SETTINGS_SELECTING_COURSE, handle_select_course, 'pti'),
                '–ù–∞–∑–∞–¥': lambda msg: handle_transition_no_context(bot, user_context, msg, STATE_MAIN_MENU, handle_main_menu),
                '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é': lambda msg: handle_transition_no_context(bot, user_context, msg, STATE_MAIN_MENU, handle_main_menu),
            },
            STATE_SETTINGS_SELECTING_COURSE: {
                '1 –∫—É—Ä—Å': lambda msg: handle_show_groups(bot, user_context, user_data, msg, STATE_SETTINGS_SELECTING_GROUP),
                '2 –∫—É—Ä—Å': lambda msg: handle_show_groups(bot, user_context, user_data, msg, STATE_SETTINGS_SELECTING_GROUP),
                '3 –∫—É—Ä—Å': lambda msg: handle_show_groups(bot, user_context, user_data, msg, STATE_SETTINGS_SELECTING_GROUP),
                '4 –∫—É—Ä—Å': lambda msg: handle_show_groups(bot, user_context, user_data, msg, STATE_SETTINGS_SELECTING_GROUP),
                '5 –∫—É—Ä—Å': lambda msg: handle_show_groups(bot, user_context, user_data, msg, STATE_SETTINGS_SELECTING_GROUP),
                '6 –∫—É—Ä—Å': lambda msg: handle_show_groups(bot, user_context, user_data, msg, STATE_SETTINGS_SELECTING_GROUP),
                '–ù–∞–∑–∞–¥': lambda msg: handle_transition_no_context(bot, user_context, msg, STATE_SETTINGS_SELECTING_COLLEGE, handle_select_college),
                '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é': lambda msg: handle_transition_no_context(bot, user_context, msg, STATE_MAIN_MENU, handle_main_menu),
            },
            STATE_SETTINGS_SELECTING_GROUP: {
                **{grp: lambda msg, groups=grp: handle_transition_with_context(bot, user_context, msg, STATE_SETTINGS_SELECTING_TIME, save_group_settings, groups) for grp in groups},
                '–ù–∞–∑–∞–¥': lambda msg: handle_transition_with_context(bot, user_context, msg, STATE_SETTINGS_SELECTING_COURSE, handle_select_course, user_data.get('college')),
                '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é': lambda msg: handle_transition_no_context(bot, user_context, msg, STATE_MAIN_MENU, handle_main_menu),
            },
            STATE_SETTINGS_SELECTING_TIME: {
                '15:00': lambda msg: save_notification_time(bot, user_context, msg, '15:00', STATE_MAIN_MENU),
                '16:00': lambda msg: save_notification_time(bot, user_context, msg, '16:00', STATE_MAIN_MENU),
                '17:00': lambda msg: save_notification_time(bot, user_context, msg, '17:00', STATE_MAIN_MENU),
                '18:00': lambda msg: save_notification_time(bot, user_context, msg, '18:00', STATE_MAIN_MENU),
                '19:00': lambda msg: save_notification_time(bot, user_context, msg, '19:00', STATE_MAIN_MENU),
                '20:00': lambda msg: save_notification_time(bot, user_context, msg, '20:00', STATE_MAIN_MENU),
                '21:00': lambda msg: save_notification_time(bot, user_context, msg, '21:00', STATE_MAIN_MENU),
                '22:00': lambda msg: save_notification_time(bot, user_context, msg, '22:00', STATE_MAIN_MENU),
                '23:00': lambda msg: save_notification_time(bot, user_context, msg, '23:00', STATE_MAIN_MENU),
                '–ù–∞–∑–∞–¥': lambda msg: handle_show_groups(bot, user_context, user_data, msg, STATE_SETTINGS_SELECTING_GROUP),
                '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é': lambda msg: handle_transition_no_context(bot, user_context, msg, STATE_MAIN_MENU, handle_main_menu),
            },
        }
        handler = switch.get(current_state, {}).get(message.text, lambda msg: handle_unknown(bot, user_context, msg, STATE_MAIN_MENU))
        handler(message)

def bot_send_location_and_message(bot, message, latitude, longitude, str):
    bot.send_location(message.chat.id, latitude, longitude)
    bot.send_message(message.chat.id, str)

def fetch_group_ids(college, group_list):
    temp = Database.execute_query(f'SELECT group_id FROM groups_students_{college}', fetch=True)
    group_list.extend([item[0] for item in temp])

def update_checked_field_notifications(user_id, college, user_group, checked, notification_time):
    query = '''
        INSERT INTO users_notifications (user_id, college, user_group, checked, time_notification)
        VALUES (%s, %s, %s, %s, %s)
        ON CONFLICT (user_id)
            DO UPDATE SET 
            college = EXCLUDED.college,
            user_group = EXCLUDED.user_group,
            checked = EXCLUDED.checked,
            time_notification = EXCLUDED.time_notification;
    '''
    Database.execute_query(query, (user_id, college, user_group, checked, notification_time))


def send_notifications():
    
    while True:
        while datetime.now().strftime('%M') > '00':
            time.sleep(50)
        now = datetime.now()
        current_hour = now.strftime('%H')
        
        if current_hour == '00':
            if now.weekday() == 5:
                delta = timedelta(hours=24)
            else:
                delta = timedelta(hours=14)
                
            next_check_time = (now + delta).replace(minute=0, second=0, microsecond=0)
            users_notifications = Database.execute_query(
                'SELECT user_id, college, user_group, time_notification FROM users_notifications WHERE checked = true',
                fetch=True
            )
            for user_id, college, user_group, notification_time in users_notifications:
                update_checked_field_notifications(user_id, college, user_group, False, notification_time)
            
        else:
            next_check_time = (now + timedelta(hours=1)).replace(minute=0, second=0, microsecond=0)
            
            users_notifications = Database.execute_query(
                'SELECT user_id, college, user_group, time_notification FROM users_notifications WHERE time_notification = %s AND checked = false',
                (current_hour,),
                fetch=True
            )

            
            for user_id, college, user_group, notification_time in users_notifications:
                
                group = user_group
                week_type = '–í–µ—Ä—Ö–Ω—è—è' if datetime.now().isocalendar()[1] % 2 == 1 else '–ù–∏–∂–Ω—è—è'
                
                tomorrow = now - timedelta(days=1)
                day_of_week = days[tomorrow.weekday()]
                if college == 'ptk':
                    schedule = get_schedule_ptk(group, day_of_week, week_type)
                if schedule:
                    bot.send_message(user_id, f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞: {schedule}')
                
                update_checked_field_notifications(user_id, college, user_group, True, notification_time)
            
        time.sleep((next_check_time - datetime.now()).total_seconds() - 100)

def process_institute(institute):
    print(f"thread {institute}")
    local_groups = []
    fetch_group_ids(institute, local_groups)
    init_schedule(institute, local_groups)
    
    with groups_lock:
        groups.extend(local_groups)
    
    print(f"thread {institute}")

def update_database():
    print("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞—á–∞—Ç–æ")
    
    start_time = time.time()

    global groups
    group = []
    
    url = 'https://portal.novsu.ru/univer/timetable/ochn/'
    
    response = requests.get(url)
    html = response.text
    soup = BS(html, 'html.parser')
    
    Database.rebuild_db()

    institute_names = init_list_groups(soup)
    global groups_lock
    groups_lock = threading.Lock()

    with ThreadPoolExecutor(max_workers=20) as executor:
        executor.map(process_institute, institute_names)
    
    end_time = time.time()
    elapsed_time = end_time - start_time

    print(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥")
                    
def update_thread():    
    while True:
        current_hour = datetime.now().hour
        if current_hour == 4:
            try:
                with update_lock:
                    update_database()
                
            except Exception as e:
                print(f"Error during database update: {e}")
        print(current_hour)
        time.sleep(3500)

def main():
    update_database()
    
    db_update_thread = threading.Thread(target=update_thread)
    db_update_thread.daemon = True 
    db_update_thread.start()
    
    notification_thread = threading.Thread(target=send_notifications)
    notification_thread.daemon = True
    notification_thread.start()
    
    bot.polling()

if __name__ == '__main__':
    main()